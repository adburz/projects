
SMIWLab_C_21_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000472  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800200  00800200  000004e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000518  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da8  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c00  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b0  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000125  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ea c0       	rjmp	.+468    	; 0x1d6 <__ctors_end>
   2:	00 00       	nop
   4:	fa c0       	rjmp	.+500    	; 0x1fa <__bad_interrupt>
   6:	00 00       	nop
   8:	f8 c0       	rjmp	.+496    	; 0x1fa <__bad_interrupt>
   a:	00 00       	nop
   c:	f6 c0       	rjmp	.+492    	; 0x1fa <__bad_interrupt>
   e:	00 00       	nop
  10:	f4 c0       	rjmp	.+488    	; 0x1fa <__bad_interrupt>
  12:	00 00       	nop
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__bad_interrupt>
  16:	00 00       	nop
  18:	f0 c0       	rjmp	.+480    	; 0x1fa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ee c0       	rjmp	.+476    	; 0x1fa <__bad_interrupt>
  1e:	00 00       	nop
  20:	ec c0       	rjmp	.+472    	; 0x1fa <__bad_interrupt>
  22:	00 00       	nop
  24:	ea c0       	rjmp	.+468    	; 0x1fa <__bad_interrupt>
  26:	00 00       	nop
  28:	e8 c0       	rjmp	.+464    	; 0x1fa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	e6 c0       	rjmp	.+460    	; 0x1fa <__bad_interrupt>
  2e:	00 00       	nop
  30:	e4 c0       	rjmp	.+456    	; 0x1fa <__bad_interrupt>
  32:	00 00       	nop
  34:	e2 c0       	rjmp	.+452    	; 0x1fa <__bad_interrupt>
  36:	00 00       	nop
  38:	e0 c0       	rjmp	.+448    	; 0x1fa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	de c0       	rjmp	.+444    	; 0x1fa <__bad_interrupt>
  3e:	00 00       	nop
  40:	dc c0       	rjmp	.+440    	; 0x1fa <__bad_interrupt>
  42:	00 00       	nop
  44:	da c0       	rjmp	.+436    	; 0x1fa <__bad_interrupt>
  46:	00 00       	nop
  48:	d8 c0       	rjmp	.+432    	; 0x1fa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d6 c0       	rjmp	.+428    	; 0x1fa <__bad_interrupt>
  4e:	00 00       	nop
  50:	f4 c0       	rjmp	.+488    	; 0x23a <__vector_20>
  52:	00 00       	nop
  54:	d2 c0       	rjmp	.+420    	; 0x1fa <__bad_interrupt>
  56:	00 00       	nop
  58:	d0 c0       	rjmp	.+416    	; 0x1fa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ce c0       	rjmp	.+412    	; 0x1fa <__bad_interrupt>
  5e:	00 00       	nop
  60:	cc c0       	rjmp	.+408    	; 0x1fa <__bad_interrupt>
  62:	00 00       	nop
  64:	ca c0       	rjmp	.+404    	; 0x1fa <__bad_interrupt>
  66:	00 00       	nop
  68:	c8 c0       	rjmp	.+400    	; 0x1fa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c6 c0       	rjmp	.+396    	; 0x1fa <__bad_interrupt>
  6e:	00 00       	nop
  70:	c4 c0       	rjmp	.+392    	; 0x1fa <__bad_interrupt>
  72:	00 00       	nop
  74:	c2 c0       	rjmp	.+388    	; 0x1fa <__bad_interrupt>
  76:	00 00       	nop
  78:	c0 c0       	rjmp	.+384    	; 0x1fa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	be c0       	rjmp	.+380    	; 0x1fa <__bad_interrupt>
  7e:	00 00       	nop
  80:	bc c0       	rjmp	.+376    	; 0x1fa <__bad_interrupt>
  82:	00 00       	nop
  84:	ba c0       	rjmp	.+372    	; 0x1fa <__bad_interrupt>
  86:	00 00       	nop
  88:	b8 c0       	rjmp	.+368    	; 0x1fa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b6 c0       	rjmp	.+364    	; 0x1fa <__bad_interrupt>
  8e:	00 00       	nop
  90:	b4 c0       	rjmp	.+360    	; 0x1fa <__bad_interrupt>
  92:	00 00       	nop
  94:	b2 c0       	rjmp	.+356    	; 0x1fa <__bad_interrupt>
  96:	00 00       	nop
  98:	b0 c0       	rjmp	.+352    	; 0x1fa <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ae c0       	rjmp	.+348    	; 0x1fa <__bad_interrupt>
  9e:	00 00       	nop
  a0:	ac c0       	rjmp	.+344    	; 0x1fa <__bad_interrupt>
  a2:	00 00       	nop
  a4:	aa c0       	rjmp	.+340    	; 0x1fa <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a8 c0       	rjmp	.+336    	; 0x1fa <__bad_interrupt>
  aa:	00 00       	nop
  ac:	a6 c0       	rjmp	.+332    	; 0x1fa <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a4 c0       	rjmp	.+328    	; 0x1fa <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a2 c0       	rjmp	.+324    	; 0x1fa <__bad_interrupt>
  b6:	00 00       	nop
  b8:	a0 c0       	rjmp	.+320    	; 0x1fa <__bad_interrupt>
  ba:	00 00       	nop
  bc:	9e c0       	rjmp	.+316    	; 0x1fa <__bad_interrupt>
  be:	00 00       	nop
  c0:	9c c0       	rjmp	.+312    	; 0x1fa <__bad_interrupt>
  c2:	00 00       	nop
  c4:	9a c0       	rjmp	.+308    	; 0x1fa <__bad_interrupt>
  c6:	00 00       	nop
  c8:	98 c0       	rjmp	.+304    	; 0x1fa <__bad_interrupt>
  ca:	00 00       	nop
  cc:	96 c0       	rjmp	.+300    	; 0x1fa <__bad_interrupt>
  ce:	00 00       	nop
  d0:	94 c0       	rjmp	.+296    	; 0x1fa <__bad_interrupt>
  d2:	00 00       	nop
  d4:	92 c0       	rjmp	.+292    	; 0x1fa <__bad_interrupt>
  d6:	00 00       	nop
  d8:	90 c0       	rjmp	.+288    	; 0x1fa <__bad_interrupt>
  da:	00 00       	nop
  dc:	8e c0       	rjmp	.+284    	; 0x1fa <__bad_interrupt>
  de:	00 00       	nop
  e0:	8c c0       	rjmp	.+280    	; 0x1fa <__bad_interrupt>
	...

000000e4 <TAB_ROM>:
  e4:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 1f     ................
  f4:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1f 1f     ................
 104:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
 114:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
 124:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
 134:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
 144:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
 154:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.
 164:	80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f     ................
 174:	90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f     ................
 184:	a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af     ................
 194:	b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf     ................
 1a4:	c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf     ................
 1b4:	e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef     ................
 1c4:	ff fe fd fc fb fa f9 f8 f7 f6 f5 f4 f3 f2 f1 f0     ................
	...

000001d6 <__ctors_end>:
 1d6:	11 24       	eor	r1, r1
 1d8:	1f be       	out	0x3f, r1	; 63
 1da:	cf ef       	ldi	r28, 0xFF	; 255
 1dc:	d1 e2       	ldi	r29, 0x21	; 33
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	0c bf       	out	0x3c, r16	; 60

000001e6 <__do_clear_bss>:
 1e6:	22 e0       	ldi	r18, 0x02	; 2
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b2 e0       	ldi	r27, 0x02	; 2
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
 1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
 1f0:	a5 36       	cpi	r26, 0x65	; 101
 1f2:	b2 07       	cpc	r27, r18
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
 1f6:	52 d0       	rcall	.+164    	; 0x29c <main>
 1f8:	3a c1       	rjmp	.+628    	; 0x46e <_exit>

000001fa <__bad_interrupt>:
 1fa:	02 cf       	rjmp	.-508    	; 0x0 <__vectors>

000001fc <timer1_init>:
//OFF.


// initialize timer, interrupt and variable
void timer1_init()
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	TIMSK1 = 1 << TOIE1;	// enable timer overflow interrupt for both Timer1
 204:	8f e6       	ldi	r24, 0x6F	; 111
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS10) | (1 << CS11); // setting prescaler to 64
 20e:	81 e8       	ldi	r24, 0x81	; 129
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	21 e8       	ldi	r18, 0x81	; 129
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	23 60       	ori	r18, 0x03	; 3
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	TCNT1 = 3035;	// initializing timer with value FFFF - 62500 = 3035
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	2b ed       	ldi	r18, 0xDB	; 219
 226:	3b e0       	ldi	r19, 0x0B	; 11
 228:	fc 01       	movw	r30, r24
 22a:	31 83       	std	Z+1, r19	; 0x01
 22c:	20 83       	st	Z, r18

	// initialize overflow counter variable
	tot_overflow = 0;
 22e:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <tot_overflow>
}
 232:	00 00       	nop
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <__vector_20>:

// TIMER0 overflow interrupt service routine
// called whenever TCNT0 overflows
ISR(TIMER1_OVF_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 24a:	0f 92       	push	r0
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	tot_overflow++;	// incrementing interrupts counter
 260:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <tot_overflow>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <tot_overflow>
	TCNT1 = 3035;	// initializing timer with value FFFF - 62500 = 3035
 26a:	84 e8       	ldi	r24, 0x84	; 132
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2b ed       	ldi	r18, 0xDB	; 219
 270:	3b e0       	ldi	r19, 0x0B	; 11
 272:	fc 01       	movw	r30, r24
 274:	31 83       	std	Z+1, r19	; 0x01
 276:	20 83       	st	Z, r18
}
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 290:	0f 90       	pop	r0
 292:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <main>:

int main (void)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	65 97       	sbiw	r28, 0x15	; 21
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
	// Main program code place here
	// 1. Place here code related to initialization of ports and interrupts

	//Initializing all ports
	//buttons on portA as input with pullup
	DDRA=0x00;
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	10 82       	st	Z, r1
	PORTA=0xFF;	//pull ups
 2b8:	82 e2       	ldi	r24, 0x22	; 34
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2f ef       	ldi	r18, 0xFF	; 255
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	
	//initializing LEDs on portB.5 .6 .7 and setting them OFF
	 DDRB = DDRB|0xE0;
 2c2:	84 e2       	ldi	r24, 0x24	; 36
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	24 e2       	ldi	r18, 0x24	; 36
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	20 6e       	ori	r18, 0xE0	; 224
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
	 PORTB = PORTB|0xE0;
 2d4:	85 e2       	ldi	r24, 0x25	; 37
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	25 e2       	ldi	r18, 0x25	; 37
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	f9 01       	movw	r30, r18
 2de:	20 81       	ld	r18, Z
 2e0:	20 6e       	ori	r18, 0xE0	; 224
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18

	 //initializing portC
	 DDRC=0xFF; 
 2e6:	87 e2       	ldi	r24, 0x27	; 39
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	 PORTC=0xFF;
 2f0:	88 e2       	ldi	r24, 0x28	; 40
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18

	 //initializing portL
	 DDRL=0xFF;
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
	 PORTL=0x00;
 304:	8b e0       	ldi	r24, 0x0B	; 11
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	fc 01       	movw	r30, r24
 30a:	10 82       	st	Z, r1
	 

	// 3. Place here main code

	//checks if any button is pressed
	if(PINA != 0xFF) 
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	8f 3f       	cpi	r24, 0xFF	; 255
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x7e>
 318:	72 c0       	rjmp	.+228    	; 0x3fe <main+0x162>
	{
		//start copying
		PORTB= PORTB&0xBF; //turns on the b.6 led ( 0xBF = 1011 1111 )
 31a:	85 e2       	ldi	r24, 0x25	; 37
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	25 e2       	ldi	r18, 0x25	; 37
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	2f 7b       	andi	r18, 0xBF	; 191
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
		for(int i=0; i<nLength; i++)	//copying ROM->RAM loop
 32c:	1a 82       	std	Y+2, r1	; 0x02
 32e:	19 82       	std	Y+1, r1	; 0x01
 330:	5e c0       	rjmp	.+188    	; 0x3ee <main+0x152>
		{
			//checking if end of TAB_ROM array
			if(pgm_read_byte_far(TAB_ROM + i) == 0 && pgm_read_byte_far(TAB_ROM + i + 1) == 0) break; 
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	8c 51       	subi	r24, 0x1C	; 28
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	09 2e       	mov	r0, r25
 33c:	00 0c       	add	r0, r0
 33e:	aa 0b       	sbc	r26, r26
 340:	bb 0b       	sbc	r27, r27
 342:	8b 83       	std	Y+3, r24	; 0x03
 344:	9c 83       	std	Y+4, r25	; 0x04
 346:	ad 83       	std	Y+5, r26	; 0x05
 348:	be 83       	std	Y+6, r27	; 0x06
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	ad 81       	ldd	r26, Y+5	; 0x05
 350:	be 81       	ldd	r27, Y+6	; 0x06
 352:	ab bf       	out	0x3b, r26	; 59
 354:	fc 01       	movw	r30, r24
 356:	87 91       	elpm	r24, Z+
 358:	8f 83       	std	Y+7, r24	; 0x07
 35a:	8f 81       	ldd	r24, Y+7	; 0x07
 35c:	88 23       	and	r24, r24
 35e:	c9 f4       	brne	.+50     	; 0x392 <main+0xf6>
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	8c 51       	subi	r24, 0x1C	; 28
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	09 2e       	mov	r0, r25
 36c:	00 0c       	add	r0, r0
 36e:	aa 0b       	sbc	r26, r26
 370:	bb 0b       	sbc	r27, r27
 372:	89 8b       	std	Y+17, r24	; 0x11
 374:	9a 8b       	std	Y+18, r25	; 0x12
 376:	ab 8b       	std	Y+19, r26	; 0x13
 378:	bc 8b       	std	Y+20, r27	; 0x14
 37a:	89 89       	ldd	r24, Y+17	; 0x11
 37c:	9a 89       	ldd	r25, Y+18	; 0x12
 37e:	ab 89       	ldd	r26, Y+19	; 0x13
 380:	bc 89       	ldd	r27, Y+20	; 0x14
 382:	ab bf       	out	0x3b, r26	; 59
 384:	fc 01       	movw	r30, r24
 386:	87 91       	elpm	r24, Z+
 388:	8d 8b       	std	Y+21, r24	; 0x15
 38a:	8d 89       	ldd	r24, Y+21	; 0x15
 38c:	88 23       	and	r24, r24
 38e:	09 f4       	brne	.+2      	; 0x392 <main+0xf6>
 390:	35 c0       	rjmp	.+106    	; 0x3fc <main+0x160>
			//copying ROM to RAM
			TAB_RAM[i]= pgm_read_byte_far(pgm_get_far_address(TAB_ROM)+i);
 392:	84 ee       	ldi	r24, 0xE4	; 228
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	bb 27       	eor	r27, r27
 39a:	88 87       	std	Y+8, r24	; 0x08
 39c:	99 87       	std	Y+9, r25	; 0x09
 39e:	aa 87       	std	Y+10, r26	; 0x0a
 3a0:	bb 87       	std	Y+11, r27	; 0x0b
 3a2:	28 85       	ldd	r18, Y+8	; 0x08
 3a4:	39 85       	ldd	r19, Y+9	; 0x09
 3a6:	4a 85       	ldd	r20, Y+10	; 0x0a
 3a8:	5b 85       	ldd	r21, Y+11	; 0x0b
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	09 2e       	mov	r0, r25
 3b0:	00 0c       	add	r0, r0
 3b2:	aa 0b       	sbc	r26, r26
 3b4:	bb 0b       	sbc	r27, r27
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	a4 1f       	adc	r26, r20
 3bc:	b5 1f       	adc	r27, r21
 3be:	8c 87       	std	Y+12, r24	; 0x0c
 3c0:	9d 87       	std	Y+13, r25	; 0x0d
 3c2:	ae 87       	std	Y+14, r26	; 0x0e
 3c4:	bf 87       	std	Y+15, r27	; 0x0f
 3c6:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c8:	9d 85       	ldd	r25, Y+13	; 0x0d
 3ca:	ae 85       	ldd	r26, Y+14	; 0x0e
 3cc:	bf 85       	ldd	r27, Y+15	; 0x0f
 3ce:	ab bf       	out	0x3b, r26	; 59
 3d0:	fc 01       	movw	r30, r24
 3d2:	87 91       	elpm	r24, Z+
 3d4:	88 8b       	std	Y+16, r24	; 0x10
 3d6:	28 89       	ldd	r18, Y+16	; 0x10
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	9a 81       	ldd	r25, Y+2	; 0x02
 3dc:	80 50       	subi	r24, 0x00	; 0
 3de:	9e 4f       	sbci	r25, 0xFE	; 254
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	//checks if any button is pressed
	if(PINA != 0xFF) 
	{
		//start copying
		PORTB= PORTB&0xBF; //turns on the b.6 led ( 0xBF = 1011 1111 )
		for(int i=0; i<nLength; i++)	//copying ROM->RAM loop
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	9a 81       	ldd	r25, Y+2	; 0x02
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	9a 83       	std	Y+2, r25	; 0x02
 3ec:	89 83       	std	Y+1, r24	; 0x01
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	84 36       	cpi	r24, 0x64	; 100
 3f4:	91 05       	cpc	r25, r1
 3f6:	0c f4       	brge	.+2      	; 0x3fa <main+0x15e>
 3f8:	9c cf       	rjmp	.-200    	; 0x332 <main+0x96>
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <main+0x162>
		{
			//checking if end of TAB_ROM array
			if(pgm_read_byte_far(TAB_ROM + i) == 0 && pgm_read_byte_far(TAB_ROM + i + 1) == 0) break; 
 3fc:	00 00       	nop
			//copying ROM to RAM
			TAB_RAM[i]= pgm_read_byte_far(pgm_get_far_address(TAB_ROM)+i);
		}		
		
	}
	sei();
 3fe:	78 94       	sei
	timer1_init();
 400:	fd de       	rcall	.-518    	; 0x1fc <timer1_init>
	while(1)
	{
		if(tot_overflow == 1){
 402:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <tot_overflow>
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	79 f4       	brne	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			PORTB= PORTB|0x40;//turns off the b.6 led ( 0x40 = 0100 0000) after 250ms
 40a:	85 e2       	ldi	r24, 0x25	; 37
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	25 e2       	ldi	r18, 0x25	; 37
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	f9 01       	movw	r30, r18
 414:	20 81       	ld	r18, Z
 416:	20 64       	ori	r18, 0x40	; 64
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
			tot_overflow++;
 41c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <tot_overflow>
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <tot_overflow>
 426:	ed cf       	rjmp	.-38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
		else if(tot_overflow == 3) // added tot_overflow == 3 to prevent going into first if each iteration
 428:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <tot_overflow>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	49 f7       	brne	.-46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			PORTB= PORTB&0xBF; //turns on the b.6 led ( 0xBF = 1011 1111 ) after next 250ms
 430:	85 e2       	ldi	r24, 0x25	; 37
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	25 e2       	ldi	r18, 0x25	; 37
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	f9 01       	movw	r30, r18
 43a:	20 81       	ld	r18, Z
 43c:	2f 7b       	andi	r18, 0xBF	; 191
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
			PORTB= PORTB|0x40;//turns off the b.6 led ( 0x40 = 0100 0000) immediately after turning it on
 442:	85 e2       	ldi	r24, 0x25	; 37
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	25 e2       	ldi	r18, 0x25	; 37
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	f9 01       	movw	r30, r18
 44c:	20 81       	ld	r18, Z
 44e:	20 64       	ori	r18, 0x40	; 64
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18
			break;
 454:	00 00       	nop
		}
	}
	cli(); // disable global interrupt flag
 456:	f8 94       	cli
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0

	// Program end
	//----------------------------------------------------------------------
}
 45c:	65 96       	adiw	r28, 0x15	; 21
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
